// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// binomialLogLkhd
double binomialLogLkhd(double cz, double nz, double C, double N);
RcppExport SEXP SpatialEpi_binomialLogLkhd(SEXP czSEXP, SEXP nzSEXP, SEXP CSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type cz(czSEXP);
    Rcpp::traits::input_parameter< double >::type nz(nzSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    __result = Rcpp::wrap(binomialLogLkhd(cz, nz, C, N));
    return __result;
END_RCPP
}
// poissonLogLkhd
double poissonLogLkhd(double cz, double nz, double C, double N);
RcppExport SEXP SpatialEpi_poissonLogLkhd(SEXP czSEXP, SEXP nzSEXP, SEXP CSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type cz(czSEXP);
    Rcpp::traits::input_parameter< double >::type nz(nzSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    __result = Rcpp::wrap(poissonLogLkhd(cz, nz, C, N));
    return __result;
END_RCPP
}
// computeAllLogLkhd
NumericVector computeAllLogLkhd(NumericVector observedCases, NumericVector expectedCases, List nearestNeighborsList, String logLkhdType);
RcppExport SEXP SpatialEpi_computeAllLogLkhd(SEXP observedCasesSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsListSEXP, SEXP logLkhdTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type observedCases(observedCasesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP);
    Rcpp::traits::input_parameter< List >::type nearestNeighborsList(nearestNeighborsListSEXP);
    Rcpp::traits::input_parameter< String >::type logLkhdType(logLkhdTypeSEXP);
    __result = Rcpp::wrap(computeAllLogLkhd(observedCases, expectedCases, nearestNeighborsList, logLkhdType));
    return __result;
END_RCPP
}
// kulldorffMC
NumericVector kulldorffMC(NumericMatrix permutedCaseMatrix, NumericVector expectedCases, List nearestNeighborsList, String logLkhdType);
RcppExport SEXP SpatialEpi_kulldorffMC(SEXP permutedCaseMatrixSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsListSEXP, SEXP logLkhdTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type permutedCaseMatrix(permutedCaseMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP);
    Rcpp::traits::input_parameter< List >::type nearestNeighborsList(nearestNeighborsListSEXP);
    Rcpp::traits::input_parameter< String >::type logLkhdType(logLkhdTypeSEXP);
    __result = Rcpp::wrap(kulldorffMC(permutedCaseMatrix, expectedCases, nearestNeighborsList, logLkhdType));
    return __result;
END_RCPP
}
