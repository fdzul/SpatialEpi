// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// normalize
NumericVector normalize(NumericVector x);
RcppExport SEXP SpatialEpi_normalize(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        NumericVector __result = normalize(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// NumericVectorEquality
int NumericVectorEquality(NumericVector x, NumericVector y);
RcppExport SEXP SpatialEpi_NumericVectorEquality(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        int __result = NumericVectorEquality(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ldnbinom
double ldnbinom(double y, double E, double a, double b);
RcppExport SEXP SpatialEpi_ldnbinom(SEXP ySEXP, SEXP ESEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type E(ESEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        double __result = ldnbinom(y, E, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ldmultinom
double ldmultinom(NumericVector x, NumericVector prob);
RcppExport SEXP SpatialEpi_ldmultinom(SEXP xSEXP, SEXP probSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP );
        double __result = ldmultinom(x, prob);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// coeff
NumericVector coeff(NumericVector y_vector, NumericVector E_vector, NumericVector a_values, NumericVector b_values, List cluster_list);
RcppExport SEXP SpatialEpi_coeff(SEXP y_vectorSEXP, SEXP E_vectorSEXP, SEXP a_valuesSEXP, SEXP b_valuesSEXP, SEXP cluster_listSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type y_vector(y_vectorSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type E_vector(E_vectorSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type a_values(a_valuesSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type b_values(b_valuesSEXP );
        Rcpp::traits::input_parameter< List >::type cluster_list(cluster_listSEXP );
        NumericVector __result = coeff(y_vector, E_vector, a_values, b_values, cluster_list);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ProbSampleReplace
int ProbSampleReplace(NumericVector prob);
RcppExport SEXP SpatialEpi_ProbSampleReplace(SEXP probSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP );
        int __result = ProbSampleReplace(prob);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// check_overlap
NumericVector check_overlap(NumericMatrix config, List overlap);
RcppExport SEXP SpatialEpi_check_overlap(SEXP configSEXP, SEXP overlapSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type config(configSEXP );
        Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP );
        NumericVector __result = check_overlap(config, overlap);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// clean_moves_matrix
NumericMatrix clean_moves_matrix(NumericVector theta, NumericMatrix moves, int n_zones);
RcppExport SEXP SpatialEpi_clean_moves_matrix(SEXP thetaSEXP, SEXP movesSEXP, SEXP n_zonesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type moves(movesSEXP );
        Rcpp::traits::input_parameter< int >::type n_zones(n_zonesSEXP );
        NumericMatrix __result = clean_moves_matrix(theta, moves, n_zones);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// return_death_moves
NumericMatrix return_death_moves(NumericVector theta);
RcppExport SEXP SpatialEpi_return_death_moves(SEXP thetaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP );
        NumericMatrix __result = return_death_moves(theta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// return_birth_moves
NumericMatrix return_birth_moves(NumericVector theta, List overlap);
RcppExport SEXP SpatialEpi_return_birth_moves(SEXP thetaSEXP, SEXP overlapSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP );
        Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP );
        NumericMatrix __result = return_birth_moves(theta, overlap);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// return_local_moves
List return_local_moves(NumericVector theta, List overlap, NumericMatrix cluster_coords);
RcppExport SEXP SpatialEpi_return_local_moves(SEXP thetaSEXP, SEXP overlapSEXP, SEXP cluster_coordsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP );
        Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type cluster_coords(cluster_coordsSEXP );
        List __result = return_local_moves(theta, overlap, cluster_coords);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// MCMC_simulation
List MCMC_simulation(int n_sim, NumericVector pattern, NumericVector theta_init, List overlap, NumericMatrix cluster_coords, NumericVector p_moves_orig, int K, NumericVector lkhd_z, NumericVector lambda);
RcppExport SEXP SpatialEpi_MCMC_simulation(SEXP n_simSEXP, SEXP patternSEXP, SEXP theta_initSEXP, SEXP overlapSEXP, SEXP cluster_coordsSEXP, SEXP p_moves_origSEXP, SEXP KSEXP, SEXP lkhd_zSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type n_sim(n_simSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type pattern(patternSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type theta_init(theta_initSEXP );
        Rcpp::traits::input_parameter< List >::type overlap(overlapSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type cluster_coords(cluster_coordsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type p_moves_orig(p_moves_origSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type lkhd_z(lkhd_zSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP );
        List __result = MCMC_simulation(n_sim, pattern, theta_init, overlap, cluster_coords, p_moves_orig, K, lkhd_z, lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// binomialLogLkhd
double binomialLogLkhd(double cz, double nz, double N, double C);
RcppExport SEXP SpatialEpi_binomialLogLkhd(SEXP czSEXP, SEXP nzSEXP, SEXP NSEXP, SEXP CSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type cz(czSEXP );
        Rcpp::traits::input_parameter< double >::type nz(nzSEXP );
        Rcpp::traits::input_parameter< double >::type N(NSEXP );
        Rcpp::traits::input_parameter< double >::type C(CSEXP );
        double __result = binomialLogLkhd(cz, nz, N, C);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// poissonLogLkhd
double poissonLogLkhd(double cz, double nz, double N, double C);
RcppExport SEXP SpatialEpi_poissonLogLkhd(SEXP czSEXP, SEXP nzSEXP, SEXP NSEXP, SEXP CSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type cz(czSEXP );
        Rcpp::traits::input_parameter< double >::type nz(nzSEXP );
        Rcpp::traits::input_parameter< double >::type N(NSEXP );
        Rcpp::traits::input_parameter< double >::type C(CSEXP );
        double __result = poissonLogLkhd(cz, nz, N, C);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computeAllLogLkhd
NumericVector computeAllLogLkhd(NumericVector observedCases, NumericVector expectedCases, List nearestNeighborsList, int nZones, String logLkhdType);
RcppExport SEXP SpatialEpi_computeAllLogLkhd(SEXP observedCasesSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsListSEXP, SEXP nZonesSEXP, SEXP logLkhdTypeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type observedCases(observedCasesSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP );
        Rcpp::traits::input_parameter< List >::type nearestNeighborsList(nearestNeighborsListSEXP );
        Rcpp::traits::input_parameter< int >::type nZones(nZonesSEXP );
        Rcpp::traits::input_parameter< String >::type logLkhdType(logLkhdTypeSEXP );
        NumericVector __result = computeAllLogLkhd(observedCases, expectedCases, nearestNeighborsList, nZones, logLkhdType);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kulldorffMC
NumericVector kulldorffMC(NumericMatrix permutedCaseMatrix, NumericVector expectedCases, List nearestNeighbors, int nZones, String logLkhdType);
RcppExport SEXP SpatialEpi_kulldorffMC(SEXP permutedCaseMatrixSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsSEXP, SEXP nZonesSEXP, SEXP logLkhdTypeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type permutedCaseMatrix(permutedCaseMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP );
        Rcpp::traits::input_parameter< List >::type nearestNeighbors(nearestNeighborsSEXP );
        Rcpp::traits::input_parameter< int >::type nZones(nZonesSEXP );
        Rcpp::traits::input_parameter< String >::type logLkhdType(logLkhdTypeSEXP );
        NumericVector __result = kulldorffMC(permutedCaseMatrix, expectedCases, nearestNeighbors, nZones, logLkhdType);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// besagNewell
List besagNewell(NumericVector observedCases, NumericVector expectedCases, List nearestNeighborsList, int nZones, int k);
RcppExport SEXP SpatialEpi_besagNewell(SEXP observedCasesSEXP, SEXP expectedCasesSEXP, SEXP nearestNeighborsListSEXP, SEXP nZonesSEXP, SEXP kSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type observedCases(observedCasesSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type expectedCases(expectedCasesSEXP );
        Rcpp::traits::input_parameter< List >::type nearestNeighborsList(nearestNeighborsListSEXP );
        Rcpp::traits::input_parameter< int >::type nZones(nZonesSEXP );
        Rcpp::traits::input_parameter< int >::type k(kSEXP );
        List __result = besagNewell(observedCases, expectedCases, nearestNeighborsList, nZones, k);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
